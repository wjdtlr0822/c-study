#include <iostream>
#include <string>

using namespace std;


class Base{
    public:
    Base(){cout << "기반클래스 생성자"<<endl;}

    virtual void what(){ cout << "기반클래스의 what()"<<endl;}
};

class Derived: public Base{
    public:
    Derived():Base(){ cout <<"파생 클래스 생성자"<<endl;}

    void what(){ cout << "파생 클래스의 what()"<<endl;}
};


int main()
{
    Base b;
    Derived d;

    Base *b_d = &d;
    Base *b_b = &b;
    cout << "b_d의 what출력은!!!!()!!!!"<<endl;
    b_d->what(); //이거또한 Base의 what()함수가 실행 되어야하는데 파생클래스의 what()이 실행된다.

    cout << "b_b의 what출력은!!!!()!!!!"<<endl;
    b_b->what();

    return 0;
}

다음과 같은 코드에서 
실제로 b_d에 들어간 주소가 실제 어떤클래스인지 확인 후 실행을 하기 때문에
b_d에서 파생클래스로 취급이 되어 파생클래스의 what()이 실행된것이다.



"흠, b_d 는 Base 포인터니까 Base 의 what() 을 실행해야지"
"어 근데 what 이 virtual 이네?"

"잠깐. 이거 실제 Base 객체 맞어? 아니네 Derived 객체네"
"그럼 Derived 의 what 을 실행해야지"

와 같은 원리